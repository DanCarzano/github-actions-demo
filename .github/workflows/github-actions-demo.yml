name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:

  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      
  changeApproval:
    name: ServiceNow Change Approval
    needs: Explore-GitHub-Actions
    runs-on: ubuntu-latest

    steps:     
      - name: ServiceNow DevOps Change Automation
  # You may pin to the exact commit or the version.
  # uses: ServiceNow/servicenow-devops-change@373e092812580f05105089c20129e6efe347c8e5
        uses: ServiceNow/servicenow-devops-change@v4.0.0
        with:
    # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
    # Devops Integration User Name
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
    # Devops Integration User Password
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
    # Devops Integration Token
       #   devops-integration-token: # optional
    # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
    # Display Name of the Job
          job-name: 'ServiceNow Change Approval'
    # Github Context
          context-github: ${{ toJSON(github) }}
    # The max. time in seconds to wait until the action should fail.
          timeout: '3600'
    # The time in seconds to wait between trying the API.
          interval: '100'
    # The customized inputs to create change with the requested details.
          change-request: '{"setCloseCode":"true","autoCloseChange":true,"attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'      
    # The max. time in seconds to wait until change created.
          changeCreationTimeOut: '3600'
    # This value will be used to resume or abort the pipeline if the change is not created within the mentioned time period in changeCreationTimeOut. 
          abortOnChangeCreationFailure: true
    # This value will be used to resume or abort the pipeline after a timeout has occurred in case a change step is still in a pending state.
          abortOnChangeStepTimeout: true
    
  deploy:
    name: Deploy
    needs: changeApproval
    runs-on: ubuntu-latest

    steps:     
      - name: Run Deployment Script
        run: echo "Deployment Finished....."
